///////////////////////////////////////////////////////////////////////////////
//$Date: 2010/03/19 12:00:16 $
//$Revision: 1.4.2.1 $
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /
// \   \   \/     Vendor : Xilinx 
//  \   \         Version : 2.1
//  /   /         Application : RocketIO GTP Transceiver Wizard
// /___/   /\     Filename : gtp_wrapper_top.v
// \   \  /  \
//  \___\/\___\
//
//
// Module GTP_WRAPPER_TOP
// Generated by Xilinx RocketIO GTP Transceiver Wizard
// 
// 
// (c) Copyright 2006-2010 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 


`timescale 1ns / 1ps
`define DLY #1


//***********************************Entity Declaration************************

module GTP_WRAPPER_TOP #
(
    parameter EXAMPLE_CONFIG_INDEPENDENT_LANES          =   1,   //configuration for frame gen and check
    parameter EXAMPLE_LANE_WITH_START_CHAR              =   0,   // specifies lane with unique start frame char
    parameter EXAMPLE_WORDS_IN_BRAM                     =   512, // specifies amount of data in BRAM 
    parameter EXAMPLE_SIM_MODE                          =   "FAST",  // Set to Fast Functional Simulation Model   
    parameter EXAMPLE_SIM_GTPRESET_SPEEDUP              =   1,   // simulation setting for MGT smartmodel
    parameter EXAMPLE_SIM_PLL_PERDIV2                   =   9'h14d, // simulation setting for MGT smartmodel
    parameter EXAMPLE_USE_CHIPSCOPE                     =   1    // Set to 1 to use Chipscope to drive resets
)
(
    TILE0_REFCLK_PAD_N_IN,
    TILE0_REFCLK_PAD_P_IN,
    GTPRESET_IN,
    TILE0_PLLLKDET_OUT,
    TRACK_DATA_OUT,
    RXN_IN,
    RXP_IN,
    TXN_OUT,
    TXP_OUT
);

// synthesis attribute X_CORE_INFO of GTP_WRAPPER_TOP is "v5_gtpwizard_v2_1, Coregen v12.1";

//***********************************Ports Declaration*******************************

    input           TILE0_REFCLK_PAD_N_IN;
    input           TILE0_REFCLK_PAD_P_IN;
    input           GTPRESET_IN;
    output          TILE0_PLLLKDET_OUT;
    output          TRACK_DATA_OUT;
    input   [1:0]   RXN_IN;
    input   [1:0]   RXP_IN;
    output  [1:0]   TXN_OUT;
    output  [1:0]   TXP_OUT;

    
//************************** Register Declarations ****************************

    reg     [63:0]  ila_in0_r;
    reg     [63:0]  ila_in1_r;
    reg             tile0_tx_resetdone0_r;
    reg             tile0_tx_resetdone0_r2;
    reg             tile0_tx_resetdone1_r;
    reg             tile0_tx_resetdone1_r2;
    reg             tile0_rx_resetdone0_r;
    reg             tile0_rx_resetdone0_r2;
    reg             tile0_rx_resetdone1_r;
    reg             tile0_rx_resetdone1_r2;




//**************************** Wire Declarations ******************************

    //------------------------ MGT Wrapper Wires ------------------------------
    
    //________________________________________________________________________
    //________________________________________________________________________
    //TILE0   (X0Y3)

    //---------------------- Loopback and Powerdown Ports ----------------------
    wire    [2:0]   tile0_loopback0_i;
    wire    [2:0]   tile0_loopback1_i;
    //--------------------- Receive Ports - 8b10b Decoder ----------------------
    wire    [1:0]   tile0_rxchariscomma0_i;
    wire    [1:0]   tile0_rxchariscomma1_i;
    wire    [1:0]   tile0_rxcharisk0_i;
    wire    [1:0]   tile0_rxcharisk1_i;
    wire    [1:0]   tile0_rxdisperr0_i;
    wire    [1:0]   tile0_rxdisperr1_i;
    wire    [1:0]   tile0_rxnotintable0_i;
    wire    [1:0]   tile0_rxnotintable1_i;
    //----------------- Receive Ports - Clock Correction Ports -----------------
    wire    [2:0]   tile0_rxclkcorcnt0_i;
    wire    [2:0]   tile0_rxclkcorcnt1_i;
    //------------- Receive Ports - Comma Detection and Alignment --------------
    wire            tile0_rxbyteisaligned0_i;
    wire            tile0_rxbyteisaligned1_i;
    wire            tile0_rxbyterealign0_i;
    wire            tile0_rxbyterealign1_i;
    wire            tile0_rxcommadet0_i;
    wire            tile0_rxcommadet1_i;
    wire            tile0_rxenmcommaalign0_i;
    wire            tile0_rxenmcommaalign1_i;
    wire            tile0_rxenpcommaalign0_i;
    wire            tile0_rxenpcommaalign1_i;
    //----------------- Receive Ports - RX Data Path interface -----------------
    wire    [15:0]  tile0_rxdata0_i;
    wire    [15:0]  tile0_rxdata1_i;
    wire            tile0_rxrecclk0_i;
    wire            tile0_rxrecclk1_i;
    //------------- Receive Ports - RX Loss-of-sync State Machine --------------
    wire    [1:0]   tile0_rxlossofsync0_i;
    wire    [1:0]   tile0_rxlossofsync1_i;
    //------------------- Shared Ports - Tile and PLL Ports --------------------
    wire            tile0_gtpreset_i;
    wire            tile0_plllkdet_i;
    wire            tile0_refclkout_i;
    wire            tile0_resetdone0_i;
    wire            tile0_resetdone1_i;
    //-------------- Transmit Ports - 8b10b Encoder Control Ports --------------
    wire    [1:0]   tile0_txcharisk0_i;
    wire    [1:0]   tile0_txcharisk1_i;
    //---------------- Transmit Ports - TX Data Path interface -----------------
    wire    [15:0]  tile0_txdata0_i;
    wire    [15:0]  tile0_txdata1_i;
    wire            tile0_txoutclk0_i;
    wire            tile0_txoutclk1_i;


    //----------------------------- Global Signals -----------------------------
    wire            tile0_tx_system_reset0_c;
    wire            tile0_tx_system_reset1_c;
    wire            tile0_rx_system_reset0_c;
    wire            tile0_rx_system_reset1_c;
    wire            tied_to_ground_i;
    wire    [63:0]  tied_to_ground_vec_i;
    wire            tied_to_vcc_i;
    wire    [7:0]   tied_to_vcc_vec_i;
    wire            drp_clk_in_i;
    wire            tile0_refclkout_bufg_i;
    wire            track_data_out_i;
    wire            tile0_track_data0_i;
    wire            tile0_track_data1_i;
    
    
    //--------------------------- User Clocks ---------------------------------
    wire            tile0_txusrclk0_i;
    wire            tile0_txusrclk20_i;
    wire            tile0_rxusrclk0_i;
    wire            tile0_rxusrclk20_i;
    wire            tile0_rxusrclk1_i;
    wire            tile0_rxusrclk21_i;
    wire            txoutclk_dcm0_locked_i;
    wire            txoutclk_dcm0_reset_i;
    wire            tile0_txoutclk0_to_dcm_i;
    wire            rxrecclk_dcm1_locked_i;
    wire            rxrecclk_dcm1_reset_i;
    wire            tile0_rxrecclk0_to_dcm_i;
    wire            rxrecclk_dcm2_locked_i;
    wire            rxrecclk_dcm2_reset_i;
    wire            tile0_rxrecclk1_to_dcm_i;


    //--------------------- Frame check/gen Module Signals --------------------
    wire            tile0_refclk_i;
    wire            tile0_matchn0_i;
    wire    [1:0]   tile0_txcharisk0_float_i;
    wire    [15:0]  tile0_txdata0_float_i;
    wire    [7:0]   tile0_error_count0_i;
    wire            tile0_frame_check0_reset_i;
    wire            tile0_inc_in0_i;
    wire            tile0_inc_out0_i;
    wire            tile0_matchn1_i;
    wire    [1:0]   tile0_txcharisk1_float_i;
    wire    [15:0]  tile0_txdata1_float_i;
    wire    [7:0]   tile0_error_count1_i;
    wire            tile0_frame_check1_reset_i;
    wire            tile0_inc_in1_i;
    wire            tile0_inc_out1_i;

    wire            reset_on_data_error_i;
    
    //----------------------- Sync Module Signals -----------------------------
    wire            tile0_rx_sync_done0_i;
    wire            tile0_rx_sync_done1_i;
    wire            tx_sync_done_i; 
    


    //--------------------- Chipscope Signals ---------------------------------

    wire    [35:0]  shared_vio_control_i;
    wire    [35:0]  tx_data_vio_control0_i;
    wire    [35:0]  rx_data_vio_control0_i;
    wire    [35:0]  ila_control0_i;
    wire    [35:0]  tx_data_vio_control1_i;
    wire    [35:0]  rx_data_vio_control1_i;
    wire    [35:0]  ila_control1_i;
    wire    [31:0]  shared_vio_in_i;
    wire    [31:0]  shared_vio_out_i;
    wire    [31:0]  tx_data_vio_in0_i;
    wire    [31:0]  tx_data_vio_out0_i;
    wire    [31:0]  tx_data_vio_in1_i;
    wire    [31:0]  tx_data_vio_out1_i;
    wire    [31:0]  rx_data_vio_in0_i;
    wire    [31:0]  rx_data_vio_out0_i;
    wire    [31:0]  rx_data_vio_in1_i;
    wire    [31:0]  rx_data_vio_out1_i;
    wire    [63:0]  ila_in0_i;
    wire    [63:0]  ila_in1_i;

    wire    [31:0]  tile0_tx_data_vio_in0_i;
    wire    [31:0]  tile0_tx_data_vio_out0_i;
    wire    [31:0]  tile0_rx_data_vio_in0_i;
    wire    [31:0]  tile0_rx_data_vio_out0_i;
    wire    [63:0]  tile0_ila_in0_i;
    wire    [31:0]  tile0_tx_data_vio_in1_i;
    wire    [31:0]  tile0_tx_data_vio_out1_i;
    wire    [31:0]  tile0_rx_data_vio_in1_i;
    wire    [31:0]  tile0_rx_data_vio_out1_i;
    wire    [63:0]  tile0_ila_in1_i;


    wire            gtpreset_i;
    wire            user_tx_reset_i;
    wire            user_rx_reset_i;
    wire            ila_clk0_i;
    wire            ila_clk_mux_out0_i;
    
    wire            ila_clk1_i;
    wire            ila_clk_mux_out1_i;
    
    


//**************************** Main Body of Code *******************************

    //  Static signal Assigments    
    assign tied_to_ground_i             = 1'b0;
    assign tied_to_ground_vec_i         = 64'h0000000000000000;
    assign tied_to_vcc_i                = 1'b1;
    assign tied_to_vcc_vec_i            = 8'hff;


    


    //---------------------Dedicated GTP Reference Clock Inputs ---------------
    // The dedicated reference clock inputs you selected in the GUI are implemented using
    // IBUFDS instances.
    //
    // In the UCF file for this example design, you will see that each of
    // these IBUFDS instances has been LOCed to a particular set of pins. By LOCing to these
    // locations, we tell the tools to use the dedicated input buffers to the GTP reference
    // clock network, rather than general purpose IOs. To select other pins, consult the 
    // Implementation chapter of UG196, or rerun the wizard.
    //
    // This network is the highest performace (lowest jitter) option for providing clocks
    // to the GTP transceivers.
    
    IBUFDS tile0_refclk_ibufds_i
    (
        .O                              (tile0_refclk_i), 
        .I                              (TILE0_REFCLK_PAD_P_IN),
        .IB                             (TILE0_REFCLK_PAD_N_IN)
    );






    //--------------------------------- User Clocks ---------------------------
    
    // The clock resources in this section were added based on userclk source selections on
    // the Latency, Buffering, and Clocking page of the GUI. A few notes about user clocks:
    // * The userclk and userclk2 for each GTP datapath (TX and RX) must be phase aligned to 
    //   avoid data errors in the fabric interface whenever the datapath is wider than 10 bits
    // * To minimize clock resources, you can share clocks between GTPs. GTPs using the same frequency
    //   or multiples of the same frequency can be accomadated using DCMs and PLLs. Use caution when
    //   using RXRECCLK as a clock source, however - these clocks can typically only be shared if all
    //   the channels using the clock are receiving data from TX channels that share a reference clock 
    //   source with each other.

    BUFG txoutclk_dcm0_bufg_i
    (
        .I                              (tile0_txoutclk0_i),
        .O                              (tile0_txoutclk0_to_dcm_i)
    );

    assign  txoutclk_dcm0_reset_i           =  !tile0_plllkdet_i;
    MGT_USRCLK_SOURCE #
    (
        .FREQUENCY_MODE                 ("HIGH"),
        .PERFORMANCE_MODE               ("MAX_SPEED")
    )
    txoutclk_dcm0_i
    (
        .DIV1_OUT                       (tile0_txusrclk0_i),
        .DIV2_OUT                       (tile0_txusrclk20_i),
        .DCM_LOCKED_OUT                 (txoutclk_dcm0_locked_i),
        .CLK_IN                         (tile0_txoutclk0_to_dcm_i),
        .DCM_RESET_IN                   (txoutclk_dcm0_reset_i)
    );


    BUFG rxrecclk_dcm1_bufg_i
    (
        .I                              (tile0_rxrecclk0_i),
        .O                              (tile0_rxrecclk0_to_dcm_i)
    );

    assign  rxrecclk_dcm1_reset_i           =  !tile0_plllkdet_i;
    MGT_USRCLK_SOURCE #
    (
        .FREQUENCY_MODE                 ("HIGH"),
        .PERFORMANCE_MODE               ("MAX_SPEED")
    )
    rxrecclk_dcm1_i
    (
        .DIV1_OUT                       (tile0_rxusrclk0_i),
        .DIV2_OUT                       (tile0_rxusrclk20_i),
        .DCM_LOCKED_OUT                 (rxrecclk_dcm1_locked_i),
        .CLK_IN                         (tile0_rxrecclk0_to_dcm_i),
        .DCM_RESET_IN                   (rxrecclk_dcm1_reset_i)
    );


    BUFG rxrecclk_dcm2_bufg_i
    (
        .I                              (tile0_rxrecclk1_i),
        .O                              (tile0_rxrecclk1_to_dcm_i)
    );

    assign  rxrecclk_dcm2_reset_i           =  !tile0_plllkdet_i;
    MGT_USRCLK_SOURCE #
    (
        .FREQUENCY_MODE                 ("HIGH"),
        .PERFORMANCE_MODE               ("MAX_SPEED")
    )
    rxrecclk_dcm2_i
    (
        .DIV1_OUT                       (tile0_rxusrclk1_i),
        .DIV2_OUT                       (tile0_rxusrclk21_i),
        .DCM_LOCKED_OUT                 (rxrecclk_dcm2_locked_i),
        .CLK_IN                         (tile0_rxrecclk1_to_dcm_i),
        .DCM_RESET_IN                   (rxrecclk_dcm2_reset_i)
    );






    //--------------------------- The GTP Wrapper -----------------------------
    
    // Use the instantiation template in the project directory to add the GTP wrapper to your design.
    // In this example, the wrapper is wired up for basic operation with a frame generator and frame 
    // checker. The GTPs will reset, then attempt to align and transmit data. If channel bonding is 
    // enabled, bonding should occur after alignment.


    // Wire all PLLLKDET signals to the top level as output ports
    assign TILE0_PLLLKDET_OUT = tile0_plllkdet_i;


    GTP_WRAPPER #
    (
        .WRAPPER_SIM_MODE                       (EXAMPLE_SIM_MODE),
        .WRAPPER_SIM_GTPRESET_SPEEDUP           (EXAMPLE_SIM_GTPRESET_SPEEDUP),
        .WRAPPER_SIM_PLL_PERDIV2                (EXAMPLE_SIM_PLL_PERDIV2)
    )
    gtp_wrapper_i
    (
    
 
 
 
 
 
 
 
 
        //_____________________________________________________________________
        //_____________________________________________________________________
        //TILE0  (X0Y3)

        //---------------------- Loopback and Powerdown Ports ----------------------
        .TILE0_LOOPBACK0_IN             (tile0_loopback0_i),
        .TILE0_LOOPBACK1_IN             (tile0_loopback1_i),
        //--------------------- Receive Ports - 8b10b Decoder ----------------------
        .TILE0_RXCHARISCOMMA0_OUT       (tile0_rxchariscomma0_i),
        .TILE0_RXCHARISCOMMA1_OUT       (tile0_rxchariscomma1_i),
        .TILE0_RXCHARISK0_OUT           (tile0_rxcharisk0_i),
        .TILE0_RXCHARISK1_OUT           (tile0_rxcharisk1_i),
        .TILE0_RXDISPERR0_OUT           (tile0_rxdisperr0_i),
        .TILE0_RXDISPERR1_OUT           (tile0_rxdisperr1_i),
        .TILE0_RXNOTINTABLE0_OUT        (tile0_rxnotintable0_i),
        .TILE0_RXNOTINTABLE1_OUT        (tile0_rxnotintable1_i),
        //----------------- Receive Ports - Clock Correction Ports -----------------
        .TILE0_RXCLKCORCNT0_OUT         (tile0_rxclkcorcnt0_i),
        .TILE0_RXCLKCORCNT1_OUT         (tile0_rxclkcorcnt1_i),
        //------------- Receive Ports - Comma Detection and Alignment --------------
        .TILE0_RXBYTEISALIGNED0_OUT     (tile0_rxbyteisaligned0_i),
        .TILE0_RXBYTEISALIGNED1_OUT     (tile0_rxbyteisaligned1_i),
        .TILE0_RXBYTEREALIGN0_OUT       (tile0_rxbyterealign0_i),
        .TILE0_RXBYTEREALIGN1_OUT       (tile0_rxbyterealign1_i),
        .TILE0_RXCOMMADET0_OUT          (tile0_rxcommadet0_i),
        .TILE0_RXCOMMADET1_OUT          (tile0_rxcommadet1_i),
        .TILE0_RXENMCOMMAALIGN0_IN      (tile0_rxenmcommaalign0_i),
        .TILE0_RXENMCOMMAALIGN1_IN      (tile0_rxenmcommaalign1_i),
        .TILE0_RXENPCOMMAALIGN0_IN      (tile0_rxenpcommaalign0_i),
        .TILE0_RXENPCOMMAALIGN1_IN      (tile0_rxenpcommaalign1_i),
        //----------------- Receive Ports - RX Data Path interface -----------------
        .TILE0_RXDATA0_OUT              (tile0_rxdata0_i),
        .TILE0_RXDATA1_OUT              (tile0_rxdata1_i),
        .TILE0_RXRECCLK0_OUT            (tile0_rxrecclk0_i),
        .TILE0_RXRECCLK1_OUT            (tile0_rxrecclk1_i),
        .TILE0_RXRESET0_IN              (!rxrecclk_dcm1_locked_i),
        .TILE0_RXRESET1_IN              (!rxrecclk_dcm2_locked_i),
        .TILE0_RXUSRCLK0_IN             (tile0_rxusrclk0_i),
        .TILE0_RXUSRCLK1_IN             (tile0_rxusrclk1_i),
        .TILE0_RXUSRCLK20_IN            (tile0_rxusrclk20_i),
        .TILE0_RXUSRCLK21_IN            (tile0_rxusrclk21_i),
        //----- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------
        .TILE0_RXN0_IN                  (RXN_IN[0]),
        .TILE0_RXN1_IN                  (RXN_IN[1]),
        .TILE0_RXP0_IN                  (RXP_IN[0]),
        .TILE0_RXP1_IN                  (RXP_IN[1]),
        //------------- Receive Ports - RX Loss-of-sync State Machine --------------
        .TILE0_RXLOSSOFSYNC0_OUT        (tile0_rxlossofsync0_i),
        .TILE0_RXLOSSOFSYNC1_OUT        (tile0_rxlossofsync1_i),
        //------------------- Shared Ports - Tile and PLL Ports --------------------
        .TILE0_CLKIN_IN                 (tile0_refclk_i),
        .TILE0_GTPRESET_IN              (tile0_gtpreset_i),
        .TILE0_PLLLKDET_OUT             (tile0_plllkdet_i),
        .TILE0_REFCLKOUT_OUT            (tile0_refclkout_i),
        .TILE0_RESETDONE0_OUT           (tile0_resetdone0_i),
        .TILE0_RESETDONE1_OUT           (tile0_resetdone1_i),
        //-------------- Transmit Ports - 8b10b Encoder Control Ports --------------
        .TILE0_TXCHARISK0_IN            (tile0_txcharisk0_i),
        .TILE0_TXCHARISK1_IN            (tile0_txcharisk1_i),
        //---------------- Transmit Ports - TX Data Path interface -----------------
        .TILE0_TXDATA0_IN               (tile0_txdata0_i),
        .TILE0_TXDATA1_IN               (tile0_txdata1_i),
        .TILE0_TXOUTCLK0_OUT            (tile0_txoutclk0_i),
        .TILE0_TXOUTCLK1_OUT            (tile0_txoutclk1_i),
        .TILE0_TXUSRCLK0_IN             (tile0_txusrclk0_i),
        .TILE0_TXUSRCLK1_IN             (tile0_txusrclk0_i),
        .TILE0_TXUSRCLK20_IN            (tile0_txusrclk20_i),
        .TILE0_TXUSRCLK21_IN            (tile0_txusrclk20_i),
        //------------- Transmit Ports - TX Driver and OOB signalling --------------
        .TILE0_TXN0_OUT                 (TXN_OUT[0]),
        .TILE0_TXN1_OUT                 (TXN_OUT[1]),
        .TILE0_TXP0_OUT                 (TXP_OUT[0]),
        .TILE0_TXP1_OUT                 (TXP_OUT[1])


    );






    //------------------------ User Module Resets -----------------------------
    // All the User Modules i.e. FRAME_GEN, FRAME_CHECK and the sync modules
    // are held in reset till the RESETDONE goes high. 
    // The RESETDONE is registered a couple of times on USRCLK2 and connected 
    // to the reset of the modules
    
    always @(posedge tile0_rxusrclk20_i or negedge tile0_resetdone0_i)
    begin
        if (!tile0_resetdone0_i )
        begin
            tile0_rx_resetdone0_r    <=   `DLY 1'b0;
            tile0_rx_resetdone0_r2   <=   `DLY 1'b0;
        end
        else
        begin
            tile0_rx_resetdone0_r    <=   `DLY tile0_resetdone0_i;
            tile0_rx_resetdone0_r2   <=   `DLY tile0_rx_resetdone0_r;
        end
    end
    always @(posedge tile0_rxusrclk21_i or negedge tile0_resetdone1_i)
    begin
        if (!tile0_resetdone1_i )
        begin
            tile0_rx_resetdone1_r    <=   `DLY 1'b0;
            tile0_rx_resetdone1_r2   <=   `DLY 1'b0;
        end
        else
        begin
            tile0_rx_resetdone1_r    <=   `DLY tile0_resetdone1_i;
            tile0_rx_resetdone1_r2   <=   `DLY tile0_rx_resetdone1_r;
        end
    end
    always @(posedge tile0_txusrclk20_i or negedge tile0_resetdone0_i)
    begin
        if (!tile0_resetdone0_i )
        begin
            tile0_tx_resetdone0_r    <=   `DLY 1'b0;
            tile0_tx_resetdone0_r2   <=   `DLY 1'b0;
        end
        else
        begin
            tile0_tx_resetdone0_r    <=   `DLY tile0_resetdone0_i;
            tile0_tx_resetdone0_r2   <=   `DLY tile0_tx_resetdone0_r;
        end
    end
    always @(posedge tile0_txusrclk20_i or negedge tile0_resetdone1_i)
    begin
        if (!tile0_resetdone1_i )
        begin
            tile0_tx_resetdone1_r    <=   `DLY 1'b0;
            tile0_tx_resetdone1_r2   <=   `DLY 1'b0;
        end
        else
        begin
            tile0_tx_resetdone1_r    <=   `DLY tile0_resetdone1_i;
            tile0_tx_resetdone1_r2   <=   `DLY tile0_tx_resetdone1_r;
        end
    end

    



    //---------------------------- Frame Generators ---------------------------
    // The example design uses Block RAM based frame generators to provide test
    // data to the GTPs for transmission. By default the frame generators are 
    // loaded with an incrementing data sequence that includes commas/alignment
    // characters for alignment. If your protocol uses channel bonding, the 
    // frame generator will also be preloaded with a channel bonding sequence.
    
    // You can modify the data transmitted by changing the INIT values of the frame
    // generator in this file. Pay careful attention to bit order and the spacing
    // of your control and alignment characters.

    FRAME_GEN #
    (
        .WORDS_IN_BRAM(EXAMPLE_WORDS_IN_BRAM),
        .MEM_00(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_01(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_02(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_03(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_04(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_05(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_06(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_07(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_08(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_09(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_0A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_0B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_0C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_0D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_0E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_0F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_10(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_11(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_12(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_13(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_14(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_15(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_16(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_17(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_18(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_19(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_1A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_1B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_1C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_1D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_1E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_1F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_20(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_21(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_22(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_23(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_24(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_25(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_26(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_27(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_28(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_29(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_2A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_2B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_2C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_2D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_2E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_2F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_30(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_31(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_32(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_33(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_34(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_35(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_36(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_37(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_38(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_39(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_3A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_3B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_3C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_3D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_3E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_3F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEMP_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_01(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_02(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_03(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_04(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_05(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_06(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_07(256'h0000000000000000000000000000000000000000000000000000000000000001)
    )
    tile0_frame_gen0
    (
        // User Interface
        .TX_DATA                        ({tile0_txdata0_float_i,tile0_txdata0_i}),
        .TX_CHARISK                     ({tile0_txcharisk0_float_i,tile0_txcharisk0_i}),
        // System Interface
        .USER_CLK                       (tile0_txusrclk20_i),
        .SYSTEM_RESET                   (tile0_tx_system_reset0_c)
    );
    
    FRAME_GEN #
    (
        .WORDS_IN_BRAM(EXAMPLE_WORDS_IN_BRAM),
        .MEM_00(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_01(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_02(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_03(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_04(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_05(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_06(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_07(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_08(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_09(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_0A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_0B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_0C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_0D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_0E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_0F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_10(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_11(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_12(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_13(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_14(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_15(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_16(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_17(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_18(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_19(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_1A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_1B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_1C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_1D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_1E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_1F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_20(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_21(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_22(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_23(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_24(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_25(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_26(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_27(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_28(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_29(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_2A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_2B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_2C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_2D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_2E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_2F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_30(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_31(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_32(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_33(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_34(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_35(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_36(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_37(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_38(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_39(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_3A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_3B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_3C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_3D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_3E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_3F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEMP_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_01(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_02(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_03(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_04(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_05(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_06(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_07(256'h0000000000000000000000000000000000000000000000000000000000000001)
    )
    tile0_frame_gen1
    (
        // User Interface
        .TX_DATA                        ({tile0_txdata1_float_i,tile0_txdata1_i}),
        .TX_CHARISK                     ({tile0_txcharisk1_float_i,tile0_txcharisk1_i}),
        // System Interface
        .USER_CLK                       (tile0_txusrclk20_i),
        .SYSTEM_RESET                   (tile0_tx_system_reset1_c)
    );
    


    //-------------------------------- Frame Checkers -------------------------
    // The example design uses Block RAM based frame checkers to verify incoming  
    // data. By default the frame generators are loaded with a data sequence that 
    // matches the outgoing sequence of the frame generators for the TX ports.
    
    // You can modify the expected data sequence by changing the INIT values of the frame
    // checkers in this file. Pay careful attention to bit order and the spacing
    // of your control and alignment characters.
    
    // When the frame checker receives data, it attempts to synchronise to the 
    // incoming pattern by looking for the first sequence in the pattern. Once it 
    // finds the first sequence, it increments through the sequence, and indicates an 
    // error whenever the next value received does not match the expected value.

    assign tile0_frame_check0_reset_i = (EXAMPLE_CONFIG_INDEPENDENT_LANES==0)?reset_on_data_error_i:tile0_matchn0_i;

    // tile0_frame_check0 is always connected to the lane with the start of char
    // and this lane starts off the data checking on all the other lanes. The INC_IN port is tied off
    assign tile0_inc_in0_i = 1'b0;

    FRAME_CHECK #
    (
        .RX_DATA_WIDTH(16),
        .USE_COMMA(1),
        .WORDS_IN_BRAM(EXAMPLE_WORDS_IN_BRAM),
        .CONFIG_INDEPENDENT_LANES(1),
        .START_OF_PACKET_CHAR(16'h00bc),
        .MEM_00(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_01(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_02(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_03(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_04(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_05(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_06(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_07(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_08(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_09(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_0A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_0B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_0C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_0D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_0E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_0F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_10(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_11(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_12(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_13(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_14(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_15(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_16(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_17(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_18(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_19(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_1A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_1B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_1C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_1D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_1E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_1F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_20(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_21(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_22(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_23(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_24(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_25(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_26(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_27(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_28(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_29(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_2A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_2B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_2C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_2D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_2E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_2F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_30(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_31(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_32(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_33(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_34(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_35(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_36(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_37(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_38(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_39(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_3A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_3B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_3C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_3D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_3E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_3F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEMP_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_01(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_02(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_03(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_04(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_05(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_06(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_07(256'h0000000000000000000000000000000000000000000000000000000000000001)
    )
    tile0_frame_check0
    (
        // MGT Interface
        .RX_DATA                        (tile0_rxdata0_i),  
        .RX_ENMCOMMA_ALIGN              (tile0_rxenmcommaalign0_i),
        .RX_ENPCOMMA_ALIGN              (tile0_rxenpcommaalign0_i),
        .RX_ENCHAN_SYNC                 ( ),
        // Control Interface
        .INC_IN                         (tile0_inc_in0_i),
        .INC_OUT                        (tile0_inc_out0_i),
        .PATTERN_MATCH_N                (tile0_matchn0_i),
        .RESET_ON_ERROR                 (tile0_frame_check0_reset_i),
        // System Interface
        .USER_CLK                       (tile0_rxusrclk20_i),
        .SYSTEM_RESET                   (tile0_rx_system_reset0_c),
        .ERROR_COUNT                    (tile0_error_count0_i),
        .TRACK_DATA                     (tile0_track_data0_i)
  
    );
    
    assign tile0_frame_check1_reset_i = (EXAMPLE_CONFIG_INDEPENDENT_LANES==0)?reset_on_data_error_i:tile0_matchn1_i;

    // tile0_frame_check0 is always connected to the lane with the start of char
    // and this lane starts off the data checking on all the other lanes. The INC_IN port is tied off
    assign tile0_inc_in1_i = 1'b0;

    FRAME_CHECK #
    (
        .RX_DATA_WIDTH(16),
        .USE_COMMA(1),
        .WORDS_IN_BRAM(EXAMPLE_WORDS_IN_BRAM),
        .CONFIG_INDEPENDENT_LANES(1),
        .START_OF_PACKET_CHAR(16'h00bc),
        .MEM_00(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_01(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_02(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_03(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_04(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_05(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_06(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_07(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_08(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_09(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_0A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_0B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_0C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_0D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_0E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_0F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_10(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_11(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_12(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_13(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_14(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_15(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_16(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_17(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_18(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_19(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_1A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_1B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_1C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_1D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_1E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_1F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_20(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_21(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_22(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_23(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_24(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_25(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_26(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_27(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_28(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_29(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_2A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_2B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_2C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_2D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_2E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_2F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_30(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_31(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_32(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_33(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_34(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_35(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_36(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_37(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEM_38(256'h00000e0d00000c0b00000a0900000807000006050000040300000201000000bc),
        .MEM_39(256'h00001e1d00001c1b00001a19000018170000161500001413000012110000100f),
        .MEM_3A(256'h00002e2d00002c2b00002a29000028270000262500002423000022210000201f),
        .MEM_3B(256'h00003e3d00003c3b00003a39000038370000363500003433000032310000302f),
        .MEM_3C(256'h00004e4d00004c4b00004a49000048470000464500004443000042410000403f),
        .MEM_3D(256'h00005e5d00005c5b00005a59000058570000565500005453000052510000504f),
        .MEM_3E(256'h00006e6d00006c6b00006a69000068670000666500006463000062610000605f),
        .MEM_3F(256'h00007e7d00007c7b00007a79000078770000767500007473000072710000706f),
        .MEMP_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_01(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_02(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_03(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_04(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_05(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_06(256'h0000000000000000000000000000000000000000000000000000000000000001),
        .MEMP_07(256'h0000000000000000000000000000000000000000000000000000000000000001)
    )
    tile0_frame_check1
    (
        // MGT Interface
        .RX_DATA                        (tile0_rxdata1_i),  
        .RX_ENMCOMMA_ALIGN              (tile0_rxenmcommaalign1_i),
        .RX_ENPCOMMA_ALIGN              (tile0_rxenpcommaalign1_i),
        .RX_ENCHAN_SYNC                 ( ),
        // Control Interface
        .INC_IN                         (tile0_inc_in1_i),
        .INC_OUT                        (tile0_inc_out1_i),
        .PATTERN_MATCH_N                (tile0_matchn1_i),
        .RESET_ON_ERROR                 (tile0_frame_check1_reset_i),
        // System Interface
        .USER_CLK                       (tile0_rxusrclk21_i),
        .SYSTEM_RESET                   (tile0_rx_system_reset1_c),
        .ERROR_COUNT                    (tile0_error_count1_i),
        .TRACK_DATA                     (tile0_track_data1_i)
  
    );
    



    assign TRACK_DATA_OUT = track_data_out_i;

    assign track_data_out_i =
                                tile0_track_data0_i & 
                                tile0_track_data1_i  
 ;

    //--------------------------- Chipscope Connections -----------------------
    // When the example design is run in hardware, it uses chipscope to allow the
    // example design and GTP wrapper to be controlled and monitored. The 
    // EXAMPLE_USE_CHIPSCOPE parameter allows chipscope to be removed for simulation.
    
generate
if (EXAMPLE_USE_CHIPSCOPE==1) 
begin : chipscope


    // Shared VIO for all tiles
    shared_vio shared_vio_i
    (
      .control                          (shared_vio_control_i),
      .async_in                         (shared_vio_in_i),
      .async_out                        (shared_vio_out_i)
    );

    
    // ICON for all VIOs 
    icon i_icon
    (
      .control0                         (shared_vio_control_i),
      .control1                         (tx_data_vio_control0_i),
      .control2                         (rx_data_vio_control0_i),
      .control3                         (ila_control0_i),
      .control4                         (tx_data_vio_control1_i),
      .control5                         (rx_data_vio_control1_i),
      .control6                         (ila_control1_i)
    );

    // TX VIO 
    shared_vio tx_data_vio0_i
    (
      .control                          (tx_data_vio_control0_i),
      .async_in                         (tx_data_vio_in0_i),
      .async_out                        (tx_data_vio_out0_i)  
    );
    
    // RX VIO 
    shared_vio rx_data_vio0_i
    (
      .control                          (rx_data_vio_control0_i),
      .async_in                         (rx_data_vio_in0_i),
      .async_out                        (rx_data_vio_out0_i)  
    );
    
    // RX ILA
    ila ila0_i
    (
      .control                          (ila_control0_i),
      .clk                              (ila_clk0_i),
      .trig0                            (ila_in0_i)
    );

    // The RX ILA must use the same clock as the selected transceiver    
    BUFG ila_clk0_bufg_i
    (
        .I      (ila_clk_mux_out0_i),
        .O      (ila_clk0_i)
    );

    assign  ila_clk_mux_out0_i = tile0_rxusrclk20_i;

        
    // TX VIO 
    shared_vio tx_data_vio1_i
    (
      .control                          (tx_data_vio_control1_i),
      .async_in                         (tx_data_vio_in1_i),
      .async_out                        (tx_data_vio_out1_i)  
    );
    
    // RX VIO 
    shared_vio rx_data_vio1_i
    (
      .control                          (rx_data_vio_control1_i),
      .async_in                         (rx_data_vio_in1_i),
      .async_out                        (rx_data_vio_out1_i)  
    );
    
    // RX ILA
    ila ila1_i
    (
      .control                          (ila_control1_i),
      .clk                              (ila_clk1_i),
      .trig0                            (ila_in1_i)
    );

    // The RX ILA must use the same clock as the selected transceiver    
    BUFG ila_clk1_bufg_i
    (
        .I      (ila_clk_mux_out1_i),
        .O      (ila_clk1_i)
    );

    assign  ila_clk_mux_out1_i = tile0_rxusrclk21_i;

        

    // assign resets for frame_gen and frame_check modules
    assign  tile0_tx_system_reset0_c = !tile0_tx_resetdone0_r2 || user_tx_reset_i;
    assign  tile0_tx_system_reset1_c = !tile0_tx_resetdone1_r2 || user_tx_reset_i;
    assign  tile0_rx_system_reset0_c = !tile0_rx_resetdone0_r2 || user_rx_reset_i;
    assign  tile0_rx_system_reset1_c = !tile0_rx_resetdone1_r2 || user_rx_reset_i;


    assign  tile0_gtpreset_i = gtpreset_i;


    // Shared VIO Outputs
    assign  gtpreset_i                      =  shared_vio_out_i[31];
    assign  user_tx_reset_i                 =  shared_vio_out_i[30];
    assign  user_rx_reset_i                 =  shared_vio_out_i[29];

    // Shared VIO Inputs
    assign  shared_vio_in_i[31]             =  tile0_plllkdet_i;
    assign  shared_vio_in_i[30:0]           =  31'b0000000000000000000000000000000;

    // Chipscope connections for GTP0 on Tile 0
    assign  tile0_tx_data_vio_in0_i[31:0]   =  32'b00000000000000000000000000000000;
    assign  tile0_loopback0_i               =  tx_data_vio_out0_i[31:29];
    assign  tile0_rx_data_vio_in0_i[31]     =  tile0_resetdone0_i;
    assign  tile0_rx_data_vio_in0_i[30:0]   =  31'b0000000000000000000000000000000;
    assign  tile0_ila_in0_i[63:62]          =  tile0_rxchariscomma0_i;
    assign  tile0_ila_in0_i[61:60]          =  tile0_rxcharisk0_i;
    assign  tile0_ila_in0_i[59:58]          =  tile0_rxdisperr0_i;
    assign  tile0_ila_in0_i[57:56]          =  tile0_rxnotintable0_i;
    assign  tile0_ila_in0_i[55:53]          =  tile0_rxclkcorcnt0_i;
    assign  tile0_ila_in0_i[52]             =  tile0_rxbyteisaligned0_i;
    assign  tile0_ila_in0_i[51]             =  tile0_rxbyterealign0_i;
    assign  tile0_ila_in0_i[50]             =  tile0_rxcommadet0_i;
    assign  tile0_ila_in0_i[49:34]          =  tile0_rxdata0_i;
    assign  tile0_ila_in0_i[33:32]          =  tile0_rxlossofsync0_i;
    assign  tile0_ila_in0_i[31:24]          =  tile0_error_count0_i;
    assign  tile0_ila_in0_i[23:0]           =  24'b000000000000000000000000;

    // Chipscope connections for GTP1 on Tile 0
    assign  tile0_tx_data_vio_in1_i[31:0]   =  32'b00000000000000000000000000000000;
    assign  tile0_loopback1_i               =  tx_data_vio_out1_i[31:29];
    assign  tile0_rx_data_vio_in1_i[31]     =  tile0_resetdone1_i;
    assign  tile0_rx_data_vio_in1_i[30:0]   =  31'b0000000000000000000000000000000;
    assign  tile0_ila_in1_i[63:62]          =  tile0_rxchariscomma1_i;
    assign  tile0_ila_in1_i[61:60]          =  tile0_rxcharisk1_i;
    assign  tile0_ila_in1_i[59:58]          =  tile0_rxdisperr1_i;
    assign  tile0_ila_in1_i[57:56]          =  tile0_rxnotintable1_i;
    assign  tile0_ila_in1_i[55:53]          =  tile0_rxclkcorcnt1_i;
    assign  tile0_ila_in1_i[52]             =  tile0_rxbyteisaligned1_i;
    assign  tile0_ila_in1_i[51]             =  tile0_rxbyterealign1_i;
    assign  tile0_ila_in1_i[50]             =  tile0_rxcommadet1_i;
    assign  tile0_ila_in1_i[49:34]          =  tile0_rxdata1_i;
    assign  tile0_ila_in1_i[33:32]          =  tile0_rxlossofsync1_i;
    assign  tile0_ila_in1_i[31:24]          =  tile0_error_count1_i;
    assign  tile0_ila_in1_i[23:0]           =  24'b000000000000000000000000;


    assign  tx_data_vio_in0_i =                            tile0_tx_data_vio_in0_i;


    assign  rx_data_vio_in0_i =                            tile0_rx_data_vio_in0_i;


    assign  ila_in0_i =                                    tile0_ila_in0_i;


    assign  tx_data_vio_in1_i =                            tile0_tx_data_vio_in1_i;


    assign  rx_data_vio_in1_i =                            tile0_rx_data_vio_in1_i;


    assign  ila_in1_i =                                    tile0_ila_in1_i;




   
end //end EXAMPLE_USE_CHIPSCOPE=1 generate section
else 
begin: no_chipscope

    // If Chipscope is not being used, drive GTP reset signal
    // from the top level ports
    assign  tile0_gtpreset_i = GTPRESET_IN;

    // assign resets for frame_gen and frame_check modules
    assign  tile0_tx_system_reset0_c = !tile0_tx_resetdone0_r2;
    assign  tile0_tx_system_reset1_c = !tile0_tx_resetdone1_r2;
    assign  tile0_rx_system_reset0_c = !tile0_rx_resetdone0_r2;
    assign  tile0_rx_system_reset1_c = !tile0_rx_resetdone1_r2;



    assign  gtpreset_i                      =  tied_to_ground_i;
    assign  user_tx_reset_i                 =  tied_to_ground_i;
    assign  user_rx_reset_i                 =  tied_to_ground_i;
    assign  tile0_loopback0_i               =  tied_to_ground_vec_i[2:0];
    assign  tile0_loopback1_i               =  tied_to_ground_vec_i[2:0];



end
endgenerate //End generate for EXAMPLE_USE_CHIPSCOPE


endmodule

//-------------------------------------------------------------------
//
//  VIO core module declaration 
//  This one is for driving shared ports and is asynchronous
//
//-------------------------------------------------------------------
module shared_vio
  (
    control,
    async_in,
    async_out
  );
  input  [35:0] control;
  input  [31:0] async_in;
  output [31:0] async_out;
endmodule

//-------------------------------------------------------------------
//
//  ICON core module declaration
//
//-------------------------------------------------------------------
module icon 
  (
      control0,
      control1,
      control2,
      control3,
      control4,
      control5,
      control6
  );
  output [35:0] control0;
  output [35:0] control1;
  output [35:0] control2;
  output [35:0] control3;
  output [35:0] control4;
  output [35:0] control5;
  output [35:0] control6;
endmodule


//-------------------------------------------------------------------
//
//  ILA core module declaration
//  This is used to allow RX signals to be monitored
//
//-------------------------------------------------------------------
module ila
  (
    control,
    clk,
    trig0
  );
  input [35:0] control;
  input clk;
  input [63:0] trig0;
endmodule


